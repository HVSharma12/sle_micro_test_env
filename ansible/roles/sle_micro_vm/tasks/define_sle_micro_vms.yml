---
# Dynamically define sle_micro VMs as Ansible inventory hosts in the sle_micro_vms
# group, either directly accessible from the local host, or proxying
# via the specified libvirt host.

- name: Fail if no viable sle_micro VMs were detected
  ansible.builtin.fail:
    msg: |-
      No viable sle_micro VM definitions detected.
      Ensure that each VM specified by vm_configs in settings/vms.yml has
      a NIC entry associated with the specified management network.
  when:
    - (managed_vms | length) == 0

- name: Add Remotely accessible sle_micro VMs
  ansible.builtin.add_host:
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    ansible_user: "{{ vm_mgmt_user | default('sle_micro') }}"
    ansible_host: "{{ item.ip }}"
    ansible_python_interpreter: "{{ vm_mgmt_python | default('/usr/bin/python3') }}"
    ansible_ssh_private_key_file: "{{ [setup_ssh_key.path.local, setup_ssh_key.files[0].file] | join('/') }}"
    ansible_ssh_common_args: >-
      -o ProxyCommand='ssh -W %h:%p {{ libvirt_host_ip }}'
      -o UserKnownHostsFile=/dev/null
    groups:
      - sle_micro_vms
  loop: "{{ managed_vms }}"
  changed_when: false
  when:
    - (libvirt_host_type | default('local')) == 'remote'
  register: define_remote_sle_micro_vms

- name: Add locally accessible sle_micro VMs
  ansible.builtin.add_host:
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    ansible_user: "{{ vm_mgmt_user | default('sle_micro') }}"
    ansible_host: "{{ item.ip }}"
    ansible_python_interpreter: "{{ vm_mgmt_python | default('/usr/bin/python3') }}"
    ansible_ssh_private_key_file: "{{ [setup_ssh_key.path.local, setup_ssh_key.files[0].file] | join('/') }}"
    groups:
      - sle_micro_vms
  loop: "{{ managed_vms }}"
  when:
    - define_remote_sle_micro_vms is skipped
  changed_when: false
